// Code generated by "mock-api-gen -type Consul -pkg mockconsul -endpoints catalog.json -output ./catalog.go"; DO NOT EDIT.

package mockconsul

import (
	"fmt"
	mockapi "github.com/mkeeler/mock-http-api"

	"github.com/hashicorp/consul/api"
)

func (m *Consul) CatalogConnect(service string, queryParams map[string]string, status int, reply []*api.CatalogService) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/catalog/connect/%s", service)).WithQueryParams(queryParams)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogDatacenters(status int, reply []string) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/catalog/datacenters")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogDeregister(body []byte, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/catalog/deregister").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogGatewayServices(gateway string, queryParams map[string]string, status int, reply []*api.GatewayService) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/catalog/gateway-services/%s", gateway)).WithQueryParams(queryParams)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogNode(node string, queryParams map[string]string, status int, reply *api.CatalogNode) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/catalog/node/%s", node)).WithQueryParams(queryParams)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogNodeServiceList(node string, queryParams map[string]string, status int, reply *api.CatalogNodeServiceList) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/catalog/node-services/%s", node)).WithQueryParams(queryParams)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogNodes(status int, reply []*api.Node) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/catalog/nodes")

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogRegister(body []byte, status int, reply interface{}) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("PUT", "/v1/catalog/register").WithBody(body)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogService(service string, queryParams map[string]string, status int, reply []*api.CatalogService) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", fmt.Sprintf("/v1/catalog/service/%s", service)).WithQueryParams(queryParams)

	return m.WithJSONReply(req, status, reply)
}

func (m *Consul) CatalogServices(status int, reply map[string][]string) *mockapi.MockAPICall {
	req := mockapi.NewMockRequest("GET", "/v1/catalog/services")

	return m.WithJSONReply(req, status, reply)
}
